@page "/chat"
@using AzureAiLibrary;
@using AzureAiLibrary.Configuration
@using AzureAiLibrary.Helpers;
@using AzureAiPlayground.Data;
@using AzureAiPlayground.Pages.ViewModels;
@using AzureAiPlayground.Support;
@inject IJSRuntime JSRuntime
@inject NavigationManager _navManager;

<h3>AI Chat</h3>

<MudContainer Style="max-width: 800px; margin: auto;">

    <MudPaper Elevation="1" Class="p-3">
        <MudGrid>
            <MudItem xs="12" sm="1" md="1">
                <MudContainer Style="height: 100%; width: 100%" AlignItems="AlignItems.Center">
                    <MudIcon Icon="@(ViewModel.ChatUi.Favorited ? Icons.Material.Filled.Favorite : Icons.Material.Filled.FavoriteBorder)"
                             Style="cursor:pointer;"
                             Color="@(ViewModel.ChatUi.Favorited ? Color.Primary : Color.Default)"
                             Size="Size.Medium"
                             @onclick="ViewModel.ToggleFavorite" />
                </MudContainer>
            </MudItem>
            <MudItem xs="12" sm="7" md="7">
                <MudTextField @bind-Value="@ViewModel.Description" Label="Chat Description" />
            </MudItem>
            <MudItem xs="12" sm="2" md="2">
                <MudContainer Style="height: 100%; width: 100%" AlignItems="AlignItems.Center">
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@ViewModel.Save">Save</MudButton>
                </MudContainer>
            </MudItem>
            <MudItem xs="12" sm="2" md="2">
                <MudContainer Style="height: 100%; width: 100%" AlignItems="AlignItems.Center">
                    <MudButton Color="Color.Error" Variant="Variant.Filled" OnClick="@ViewModel.Delete">Delete</MudButton>
                </MudContainer>
            </MudItem>
        </MudGrid>

        <MudTextField @bind-Value="@ViewModel.ChatUi.Parameters.MaxResponse" Label="Max Response" InputType="InputType.Number" />

        <MudSlider @bind-Value="@ViewModel.ChatUi.Parameters.Temperature" Min="0" Max="1" Step="0.01" Color="Color.Primary" />
        <MudText>Temperature: @ViewModel.ChatUi.Parameters.Temperature</MudText>

        <MudSlider @bind-Value="@ViewModel.ChatUi.Parameters.TopP" Min="0" Max="1" Step="0.01" Color="Color.Primary" />
        <MudText>Top-P: @ViewModel.ChatUi.Parameters.TopP</MudText>
        <MudSelect @bind-Value="ViewModel.SelectedEndpoint" 
                   Label="Select Model">
            @foreach (Endpoint endpoint in ViewModel.Endpoints)
            {
                <MudSelectItem Value="@endpoint">@endpoint.Name</MudSelectItem>
            }
        </MudSelect>
        <MudList>
            <MudTextField @bind-Value="ViewModel.ChatUi.Setup" Label="System Message" Lines="4" Variant="Variant.Outlined" />

            <h4 class="mt-8 md-8">Chat</h4>
            @foreach (var uiMessage in ViewModel.ChatUi.Messages)
            {
                var isUser = uiMessage.Message.Role.Equals("user", StringComparison.OrdinalIgnoreCase);
                var isAssistant = uiMessage.Message.Role.Equals("assistant", StringComparison.OrdinalIgnoreCase);
                var listItemClass = isUser ? "justify-content-end" : "justify-content-start";

                <MudListItem Class="@listItemClass">
                    <div class="@(isUser ? "user-message" : isAssistant ? "assistant-message" : "")">
                        @if (isUser)
                        {
                            <div class="mt-4">
                                <MudMarkdown Value="@uiMessage.Message.Content" />
                            </div>
                        }
                        else
                        {
                            @foreach (var fragment in uiMessage.Fragments)
                            {
                                if (fragment.IsCodeSnippet)
                                {
                                    <MudCard Class="mt-4">
                                        <MudCardHeader Class="m-0 p-0">
                                            <div class="header-container" style="display: flex; justify-content: space-between; align-items: center; padding: 4px;">
                                                <div class="header-left ml-8">
                                                    <MudText Typo="Typo.h6">@fragment.Language</MudText>
                                                </div>
                                                <div class="header-right">
                                                    <MudButton Variant="Variant.Text" Color="Color.Primary" Size="Size.Small" OnClick="@(() => CopyToClipboard(fragment.Content))">
                                                        <MudIcon Icon="Icons.Material.Filled.ContentCopy" />
                                                        <span>Copy code</span>
                                                    </MudButton>
                                                </div>
                                            </div>
                                        </MudCardHeader>
                                        <div class="card-content-container">
                                            <MudCardContent>
                                                <pre class="code-snippet p-4 m-0">@fragment.Content</pre>
                                            </MudCardContent>
                                        </div>
                                    </MudCard>
                                }
                                else
                                {
                                    <div class="mt-4">
                                        <MudMarkdown Value="@fragment.Content" />
                                    </div>
                                }
                            }
                        }
                    </div>
                </MudListItem>
            }
        </MudList>
    </MudPaper>
    <MudPaper Elevation="1" Class="p-3" Style="max-width: 800px; margin: auto;">
        <MudTextField @bind-Value="ViewModel.UserInput"
                      Disabled="@ViewModel.IsLoading"
                      Immediate="true"
                      Label="User Input" Lines="4" Variant="Variant.Outlined"
                      Placeholder="Type your message here..."
                      Adornment="Adornment.End"
                      AdornmentIcon="@Icons.Material.Filled.Send"
                      OnAdornmentClick="ViewModel.SendMessage"
                      Style="max-width: 800px;"
                      AdornmentColor="Color.Primary"
                      OnKeyDown="@(e => HandleKeyDown(e))" />
        @if (ViewModel.IsLoading)
        {
            <MudText>Calling API, Wait for the answer</MudText>
        }
    </MudPaper>

</MudContainer>

<style>
    .user-message, .assistant-message {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .card-content-container {
        position: relative;
    }



    .header-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        background-color: #f5f5f5;
        width: 100%;
    }

    .header-left {
        flex-grow: 1;
    }

    .header-right {
        flex-grow: 0;
    }

    .user-message {
        background-color: #e0f7fa;
        padding: 1rem;
        margin: 0.5rem 0;
        border-radius: 10px;
    }

    .assistant-message {
        background-color: #f1f1f1;
        padding: 1rem;
        margin: 0.5rem 0;
        border-radius: 10px;
    }

    .code-snippet {
        background-color: black;
        color: white;
        font-family: 'Courier New', Courier, monospace;
    }

    .markdown {
        margin-bottom: 1rem;
    }
</style>

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "id")]
    public string Id { get; set; }

    [Inject]
    public ChatViewModel ViewModel { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        ViewModel.Initialize(Id);
    }

    private async Task CopyToClipboard(string text)
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.CtrlKey && e.Key == "Enter")
        {
            await ViewModel.SendMessage();
        }
    }

    private async void HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await ViewModel.SendMessage();
        }
    }
}