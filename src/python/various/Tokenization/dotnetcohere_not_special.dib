#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!csharp

// install required packages
#r "nuget: Microsoft.ML.Tokenizers, 0.22.0-preview.24271.1"

#!csharp

// Now download the json tokenizer from cohere "https://storage.googleapis.com/cohere-public/tokenizers/command-r-plus.json" locally

using System;
using System.IO;
using System.Net.Http;
using System.Threading.Tasks;

var url = "https://storage.googleapis.com/cohere-public/tokenizers/command-r-plus.json";
var localPath = "command-r-plus.json";

using (var client = new HttpClient())
{
    var response = await client.GetAsync(url);
    response.EnsureSuccessStatusCode();
    var content = await response.Content.ReadAsStreamAsync();
    using (var fileStream = File.Create(localPath))
    {
        content.Seek(0, SeekOrigin.Begin);
        content.CopyTo(fileStream);
    }
}

#!csharp

// now I need to load downloaded file, then create the tiktoken file
using System.IO;
using System.Text;
using System.Text.Json;
using System.Text.Json.Nodes;

string jsonString = File.ReadAllText(localPath);

string outputFilePath = "commandrplus.tiktoken";

using (JsonDocument document = JsonDocument.Parse(jsonString))
{
    //First of all we need to find the node called model
    JsonElement root = document.RootElement;
    JsonElement model = root.GetProperty("model");

    //now from the model object we got a vocab node with the vocabulary
    JsonElement vocab = model.GetProperty("vocab");

    //now the node is an object where the key are the token and value is the token Id
    //To verify this we can print the very first 10
    foreach (var item in vocab.EnumerateObject().Take(10))
    {
        Console.WriteLine($"{item.Name}: {item.Value}");
    }

    //now open output file and start writing, fore each item in the vocabulary
    //base64 encoding of the key, followed by a space then the token value
    using (StreamWriter outputFile = new StreamWriter(outputFilePath))
    {
        foreach (var item in vocab.EnumerateObject())
        {
            byte[] bytes = Encoding.UTF8.GetBytes(item.Name);
            string base64 = Convert.ToBase64String(bytes);
            outputFile.WriteLine($"{base64} {item.Value}");
        }
    }
}

#!csharp

//now we can use the microsoft tiktoken library to create the tokenizer
using Microsoft.ML.Tokenizers;

var string_to_tokenize = "Now I'm using CommandR+ tokenizer, <|YES_TOKEN|> it's working";
string_to_tokenize = "Now ";
//this uses the new namespace from microsoft that finally have tiktoken
var tiktoken = new Tiktoken("commandrplus.tiktoken", null, null, null);
var tokens = tiktoken.Encode(string_to_tokenize, out var s);

Console.WriteLine("Tokens count: {0}", tokens.Count);

foreach (var token in tokens)
{
    Console.Write(token.Id);
    Console.Write(" ");
}
